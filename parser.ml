type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | LET
  | LETREC
  | IN
  | NIL
  | CONS
  | ISNIL
  | HEAD
  | TAIL
  | CONCAT
  | BOOL
  | NAT
  | STRING
  | QUIT
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LCORCHETE
  | RCORCHETE
  | COMMA
  | DOT
  | EQ
  | COLON
  | ARROW
  | EOF
  | INTV of (int)
  | IDV of (string)
  | IDTY of (string)
  | STRINGV of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 46 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* LET *);
  267 (* LETREC *);
  268 (* IN *);
  269 (* NIL *);
  270 (* CONS *);
  271 (* ISNIL *);
  272 (* HEAD *);
  273 (* TAIL *);
  274 (* CONCAT *);
  275 (* BOOL *);
  276 (* NAT *);
  277 (* STRING *);
  278 (* QUIT *);
  279 (* LPAREN *);
  280 (* RPAREN *);
  281 (* LBRACKET *);
  282 (* RBRACKET *);
  283 (* LCORCHETE *);
  284 (* RCORCHETE *);
  285 (* COMMA *);
  286 (* DOT *);
  287 (* EQ *);
  288 (* COLON *);
  289 (* ARROW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  290 (* INTV *);
  291 (* IDV *);
  292 (* IDTY *);
  293 (* STRINGV *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\002\000\002\000\002\000\002\000\
\002\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\005\000\005\000\005\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\008\000\008\000\009\000\009\000\007\000\007\000\003\000\003\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\012\000\
\012\000\013\000\013\000\011\000\011\000\000\000"

let yylen = "\002\000\
\004\000\004\000\002\000\002\000\001\000\006\000\006\000\006\000\
\008\000\001\000\002\000\002\000\002\000\003\000\005\000\006\000\
\005\000\005\000\005\000\002\000\003\000\003\000\001\000\003\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\000\000\001\000\003\000\005\000\001\000\003\000\001\000\003\000\
\003\000\001\000\001\000\001\000\003\000\001\000\003\000\000\000\
\001\000\003\000\005\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\026\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\030\000\
\054\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\034\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\043\000\044\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\000\000\000\000\031\000\032\000\000\000\
\000\000\021\000\022\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\000\001\000\002\000\000\000\000\000\
\000\000\000\000\041\000\000\000\045\000\047\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\007\000\006\000\008\000\
\000\000\053\000\000\000\000\000\036\000\000\000\000\000\009\000\
\000\000"

let yydgoto = "\002\000\
\025\000\047\000\090\000\027\000\028\000\029\000\048\000\049\000\
\050\000\069\000\091\000\000\000\000\000"

let yysindex = "\255\255\
\123\255\000\000\223\254\000\000\000\000\163\255\062\255\062\255\
\062\255\228\254\233\254\249\254\251\254\252\254\254\254\000\255\
\062\255\033\000\163\255\200\255\000\000\003\255\004\255\000\000\
\000\000\036\000\062\255\008\255\000\000\007\255\010\255\038\255\
\008\255\008\255\008\255\013\255\017\255\246\254\246\254\246\254\
\246\254\246\254\159\255\000\000\021\255\020\255\026\255\031\255\
\032\255\000\000\163\255\246\254\000\000\008\255\240\254\246\254\
\163\255\163\255\163\255\246\254\000\000\000\000\000\000\246\254\
\246\254\246\254\000\000\034\255\030\255\041\255\044\255\048\255\
\049\255\008\255\000\000\163\255\163\255\000\000\000\000\066\000\
\073\000\000\000\000\000\051\255\000\000\077\255\074\255\060\255\
\076\255\069\255\075\255\085\255\062\255\246\254\062\255\062\255\
\062\255\062\255\073\255\000\000\000\000\000\000\163\255\163\255\
\163\255\163\255\000\000\246\254\000\000\000\000\008\255\000\000\
\159\255\008\255\008\255\008\255\079\255\000\000\000\000\000\000\
\092\255\000\000\008\255\084\255\000\000\163\255\163\255\000\000\
\073\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\091\255\000\000\043\001\000\000\000\000\
\000\000\000\000\059\001\016\000\000\000\000\000\001\000\000\000\
\052\000\067\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\255\093\255\000\000\
\000\000\000\000\000\000\000\000\000\000\118\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
\000\000\154\000\000\000\000\000\000\000\000\000\000\000\056\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\096\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\169\000\000\000\
\000\000\205\000\220\000\000\001\000\000\000\000\000\000\000\000\
\000\000\000\000\015\001\000\000\000\000\000\000\000\000\000\000\
\109\255"

let yygindex = "\000\000\
\000\000\002\000\246\255\000\000\253\255\000\000\065\000\000\000\
\026\000\000\000\039\000\000\000\000\000"

let yytablesize = 605
let yytable = "\001\000\
\028\000\030\000\026\000\033\000\034\000\035\000\036\000\032\000\
\061\000\062\000\063\000\037\000\064\000\043\000\065\000\010\000\
\066\000\082\000\083\000\038\000\045\000\039\000\040\000\054\000\
\041\000\067\000\042\000\068\000\070\000\071\000\072\000\073\000\
\044\000\051\000\052\000\053\000\039\000\055\000\056\000\074\000\
\057\000\081\000\058\000\059\000\075\000\084\000\028\000\028\000\
\060\000\088\000\076\000\011\000\080\000\089\000\077\000\092\000\
\078\000\079\000\085\000\086\000\087\000\093\000\094\000\004\000\
\005\000\101\000\012\000\028\000\095\000\028\000\028\000\096\000\
\102\000\028\000\028\000\097\000\098\000\099\000\028\000\028\000\
\103\000\028\000\104\000\112\000\019\000\105\000\020\000\025\000\
\025\000\111\000\106\000\113\000\114\000\115\000\116\000\021\000\
\031\000\108\000\024\000\107\000\109\000\117\000\013\000\126\000\
\118\000\119\000\120\000\121\000\025\000\123\000\025\000\025\000\
\110\000\124\000\127\000\025\000\033\000\020\000\037\000\025\000\
\025\000\052\000\025\000\003\000\004\000\005\000\006\000\128\000\
\129\000\007\000\008\000\009\000\010\000\011\000\035\000\012\000\
\013\000\014\000\015\000\016\000\017\000\100\000\125\000\000\000\
\018\000\019\000\122\000\020\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\021\000\022\000\023\000\024\000\
\004\000\005\000\000\000\003\000\004\000\005\000\006\000\000\000\
\015\000\007\000\008\000\009\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\019\000\000\000\020\000\
\000\000\019\000\000\000\020\000\055\000\000\000\000\000\000\000\
\021\000\031\000\000\000\024\000\021\000\031\000\000\000\024\000\
\003\000\004\000\005\000\006\000\017\000\000\000\007\000\008\000\
\009\000\010\000\011\000\000\000\012\000\013\000\014\000\015\000\
\016\000\017\000\000\000\018\000\000\000\000\000\019\000\000\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\046\000\000\000\024\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\
\000\000\000\000\028\000\028\000\000\000\028\000\028\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\016\000\000\000\
\000\000\010\000\010\000\000\000\010\000\010\000\000\000\028\000\
\028\000\028\000\028\000\010\000\000\000\028\000\028\000\000\000\
\000\000\000\000\028\000\028\000\000\000\028\000\010\000\010\000\
\010\000\010\000\028\000\000\000\010\000\000\000\000\000\000\000\
\000\000\010\000\010\000\000\000\010\000\011\000\011\000\000\000\
\011\000\011\000\005\000\000\000\039\000\000\000\039\000\011\000\
\039\000\039\000\039\000\039\000\012\000\012\000\000\000\012\000\
\012\000\000\000\011\000\011\000\011\000\011\000\012\000\000\000\
\011\000\000\000\000\000\000\000\000\000\011\000\011\000\000\000\
\011\000\012\000\012\000\012\000\012\000\000\000\000\000\012\000\
\000\000\000\000\000\000\000\000\012\000\012\000\000\000\012\000\
\013\000\013\000\000\000\013\000\013\000\000\000\000\000\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\020\000\
\020\000\000\000\020\000\020\000\000\000\013\000\013\000\013\000\
\013\000\020\000\000\000\013\000\000\000\000\000\000\000\000\000\
\013\000\013\000\000\000\013\000\020\000\020\000\020\000\020\000\
\000\000\000\000\020\000\000\000\000\000\000\000\000\000\020\000\
\020\000\000\000\020\000\014\000\014\000\000\000\014\000\014\000\
\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\
\000\000\000\000\015\000\015\000\000\000\015\000\015\000\000\000\
\014\000\014\000\014\000\014\000\015\000\000\000\014\000\000\000\
\000\000\000\000\000\000\014\000\014\000\000\000\014\000\015\000\
\015\000\015\000\015\000\000\000\000\000\015\000\000\000\000\000\
\000\000\000\000\015\000\015\000\000\000\015\000\017\000\017\000\
\000\000\017\000\017\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\000\000\018\000\018\000\000\000\
\018\000\018\000\000\000\017\000\017\000\017\000\017\000\018\000\
\000\000\017\000\000\000\000\000\000\000\000\000\017\000\017\000\
\000\000\017\000\018\000\018\000\018\000\018\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\018\000\018\000\000\000\
\018\000\019\000\019\000\000\000\019\000\019\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\016\000\016\000\000\000\016\000\016\000\000\000\019\000\019\000\
\019\000\019\000\016\000\000\000\019\000\000\000\000\000\000\000\
\000\000\019\000\019\000\000\000\019\000\016\000\016\000\016\000\
\016\000\000\000\000\000\016\000\028\000\028\000\000\000\000\000\
\016\000\016\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\025\000\025\000\000\000\000\000\000\000\000\000\005\000\
\005\000\028\000\000\000\028\000\000\000\000\000\005\000\000\000\
\028\000\000\000\000\000\000\000\028\000\028\000\025\000\028\000\
\025\000\000\000\005\000\000\000\005\000\025\000\000\000\005\000\
\005\000\025\000\025\000\000\000\025\000"

let yycheck = "\001\000\
\000\000\035\001\001\000\007\000\008\000\009\000\035\001\006\000\
\019\001\020\001\021\001\035\001\023\001\017\000\025\001\000\000\
\027\001\034\001\035\001\027\001\019\000\027\001\027\001\027\000\
\027\001\036\001\027\001\038\000\039\000\040\000\041\000\042\000\
\000\000\031\001\031\001\000\000\000\000\030\001\032\001\043\000\
\031\001\052\000\005\001\031\001\024\001\056\000\002\001\003\001\
\032\001\060\000\031\001\000\000\051\000\064\000\029\001\066\000\
\026\001\026\001\057\000\058\000\059\000\028\001\033\001\002\001\
\003\001\000\000\000\000\023\001\028\001\025\001\026\001\028\001\
\000\000\029\001\030\001\028\001\028\001\076\000\034\001\035\001\
\030\001\037\001\006\001\094\000\023\001\012\001\025\001\002\001\
\003\001\093\000\031\001\095\000\096\000\097\000\098\000\034\001\
\035\001\029\001\037\001\024\001\026\001\029\001\000\000\012\001\
\103\000\104\000\105\000\106\000\023\001\113\000\025\001\026\001\
\028\001\035\001\031\001\030\001\026\001\000\000\026\001\034\001\
\035\001\026\001\037\001\001\001\002\001\003\001\004\001\126\000\
\127\000\007\001\008\001\009\001\010\001\011\001\026\001\013\001\
\014\001\015\001\016\001\017\001\018\001\077\000\117\000\255\255\
\022\001\023\001\108\000\025\001\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\034\001\035\001\036\001\037\001\
\002\001\003\001\255\255\001\001\002\001\003\001\004\001\255\255\
\000\000\007\001\008\001\009\001\010\001\011\001\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\023\001\255\255\025\001\
\255\255\023\001\255\255\025\001\030\001\255\255\255\255\255\255\
\034\001\035\001\255\255\037\001\034\001\035\001\255\255\037\001\
\001\001\002\001\003\001\004\001\000\000\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\000\000\255\255\255\255\023\001\255\255\
\025\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\255\255\255\255\255\255\255\255\012\001\255\255\000\000\255\255\
\255\255\002\001\003\001\255\255\005\001\006\001\255\255\023\001\
\024\001\025\001\026\001\012\001\255\255\029\001\030\001\255\255\
\255\255\255\255\034\001\035\001\255\255\037\001\023\001\024\001\
\025\001\026\001\000\000\255\255\029\001\255\255\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\002\001\003\001\255\255\
\005\001\006\001\000\000\255\255\024\001\255\255\026\001\012\001\
\028\001\029\001\030\001\031\001\002\001\003\001\255\255\005\001\
\006\001\255\255\023\001\024\001\025\001\026\001\012\001\255\255\
\029\001\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\037\001\023\001\024\001\025\001\026\001\255\255\255\255\029\001\
\255\255\255\255\255\255\255\255\034\001\035\001\255\255\037\001\
\002\001\003\001\255\255\005\001\006\001\255\255\255\255\255\255\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\002\001\
\003\001\255\255\005\001\006\001\255\255\023\001\024\001\025\001\
\026\001\012\001\255\255\029\001\255\255\255\255\255\255\255\255\
\034\001\035\001\255\255\037\001\023\001\024\001\025\001\026\001\
\255\255\255\255\029\001\255\255\255\255\255\255\255\255\034\001\
\035\001\255\255\037\001\002\001\003\001\255\255\005\001\006\001\
\255\255\255\255\255\255\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\255\255\
\023\001\024\001\025\001\026\001\012\001\255\255\029\001\255\255\
\255\255\255\255\255\255\034\001\035\001\255\255\037\001\023\001\
\024\001\025\001\026\001\255\255\255\255\029\001\255\255\255\255\
\255\255\255\255\034\001\035\001\255\255\037\001\002\001\003\001\
\255\255\005\001\006\001\255\255\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\002\001\003\001\255\255\
\005\001\006\001\255\255\023\001\024\001\025\001\026\001\012\001\
\255\255\029\001\255\255\255\255\255\255\255\255\034\001\035\001\
\255\255\037\001\023\001\024\001\025\001\026\001\255\255\255\255\
\029\001\255\255\255\255\255\255\255\255\034\001\035\001\255\255\
\037\001\002\001\003\001\255\255\005\001\006\001\255\255\255\255\
\255\255\255\255\255\255\012\001\255\255\255\255\255\255\255\255\
\002\001\003\001\255\255\005\001\006\001\255\255\023\001\024\001\
\025\001\026\001\012\001\255\255\029\001\255\255\255\255\255\255\
\255\255\034\001\035\001\255\255\037\001\023\001\024\001\025\001\
\026\001\255\255\255\255\029\001\002\001\003\001\255\255\255\255\
\034\001\035\001\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\002\001\003\001\255\255\255\255\255\255\255\255\005\001\
\006\001\023\001\255\255\025\001\255\255\255\255\012\001\255\255\
\030\001\255\255\255\255\255\255\034\001\035\001\023\001\037\001\
\025\001\255\255\024\001\255\255\026\001\030\001\255\255\029\001\
\030\001\034\001\035\001\255\255\037\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  LET\000\
  LETREC\000\
  IN\000\
  NIL\000\
  CONS\000\
  ISNIL\000\
  HEAD\000\
  TAIL\000\
  CONCAT\000\
  BOOL\000\
  NAT\000\
  STRING\000\
  QUIT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LCORCHETE\000\
  RCORCHETE\000\
  COMMA\000\
  DOT\000\
  EQ\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  "

let yynames_block = "\
  INTV\000\
  IDV\000\
  IDTY\000\
  STRINGV\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 53 "parser.mly"
                      ( Bind (_1,_3))
# 383 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 54 "parser.mly"
                     ( BindTy(_1, _3))
# 391 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 55 "parser.mly"
               ( Eval _1 )
# 398 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
               ( Quit )
# 404 "parser.ml"
               : Lambda.command))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 60 "parser.mly"
      ( _1 )
# 411 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 62 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 420 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 64 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 429 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 66 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 438 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 68 "parser.mly"
      ( TmLetIn (_2, TmFix (TmAbs (_2, _4, _6)), _8) )
# 448 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 72 "parser.mly"
      ( _1 )
# 455 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 74 "parser.mly"
      ( TmSucc _2 )
# 462 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 76 "parser.mly"
      ( TmPred _2 )
# 469 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 78 "parser.mly"
      ( TmIsZero _2 )
# 476 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'projTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 80 "parser.mly"
      ( TmConcat (_2, _3) )
# 484 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 82 "parser.mly"
      ( TmNil _3 )
# 492 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'projTerm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 84 "parser.mly"
      ( TmCons (_3, _5, _6) )
# 501 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 86 "parser.mly"
      ( TmIsNil (_3, _5) )
# 509 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 88 "parser.mly"
      ( TmHead (_3, _5) )
# 517 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 90 "parser.mly"
      ( TmTail (_3, _5) )
# 525 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'projTerm) in
    Obj.repr(
# 92 "parser.mly"
      ( TmApp (_1, _2) )
# 533 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'projTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 96 "parser.mly"
      ( TmProj (_1,(string_of_int _3)))
# 541 "parser.ml"
               : 'projTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'projTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 99 "parser.mly"
      ( TmProj (_1,_3))
# 549 "parser.ml"
               : 'projTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 102 "parser.mly"
      ( _1 )
# 556 "parser.ml"
               : 'projTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 107 "parser.mly"
      ( _2 )
# 563 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 109 "parser.mly"
      ( _3 )
# 571 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
      ( TmTrue )
# 577 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
      ( TmFalse )
# 583 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 115 "parser.mly"
      ( TmVar _1 )
# 590 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 117 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 600 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
      ( TmString _1 )
# 607 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuplesTM) in
    Obj.repr(
# 125 "parser.mly"
     ( TmTuple _2 )
# 614 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'recordTM) in
    Obj.repr(
# 127 "parser.mly"
     (TmRecord _2)
# 621 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "parser.mly"
      ([])
# 627 "parser.ml"
               : 'recordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonEmptyRecordTM) in
    Obj.repr(
# 132 "parser.mly"
                       (_1)
# 634 "parser.ml"
               : 'recordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 135 "parser.mly"
                  ([_1,_3])
# 642 "parser.ml"
               : 'nonEmptyRecordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nonEmptyRecordTM) in
    Obj.repr(
# 136 "parser.mly"
                                         ((_1,_3)::_5)
# 651 "parser.ml"
               : 'nonEmptyRecordTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 139 "parser.mly"
          ( [_1] )
# 658 "parser.ml"
               : 'tuplesTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuplesTM) in
    Obj.repr(
# 140 "parser.mly"
                         ( _1::_3 )
# 666 "parser.ml"
               : 'tuplesTM))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 144 "parser.mly"
      ( _1 )
# 673 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 146 "parser.mly"
      ( TyArr (_1, _3) )
# 681 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 151 "parser.mly"
      ( _2 )
# 688 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "parser.mly"
      ( TyBool )
# 694 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
      ( TyNat )
# 700 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
      ( TyString )
# 706 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuplesTY) in
    Obj.repr(
# 159 "parser.mly"
      ( TyTuple _2 )
# 713 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 161 "parser.mly"
      ( TyVarTy _1 )
# 720 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 163 "parser.mly"
      ( TyList _2 )
# 727 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "parser.mly"
           ( [] )
# 733 "parser.ml"
               : 'recordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTY) in
    Obj.repr(
# 167 "parser.mly"
                    ( _1 )
# 740 "parser.ml"
               : 'recordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 170 "parser.mly"
                 ([_1,_3])
# 748 "parser.ml"
               : 'noemptyrecordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'noemptyrecordTY) in
    Obj.repr(
# 171 "parser.mly"
                                       ((_1,_3)::_5)
# 757 "parser.ml"
               : 'noemptyrecordTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 174 "parser.mly"
       ( [_1] )
# 764 "parser.ml"
               : 'tuplesTY))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuplesTY) in
    Obj.repr(
# 175 "parser.mly"
                      ( _1::_3 )
# 772 "parser.ml"
               : 'tuplesTY))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.command)
